# SPDX-FileCopyrightText: 2024 Benedikt Zinn <benedikt.wh.zinn@gmail.com>
# SPDX-FileCopyrightText: 2024 Felix Hilgers <felix.hilgers@fau.de>
# SPDX-FileCopyrightText: 2024 Luca Bretting <luca.bretting@fau.de>
#
# SPDX-License-Identifier: MIT

[package]
name = "example"
version = "0.1.0"
license.workspace = true
repository.workspace = true
edition.workspace = true

[dependencies]
example-common = { path = "../example-common", features = ["user"] }

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
env_logger = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread", "net", "signal"] }
shared = { path = "../shared" }

clap = { workspace = true, features = ["derive"] }
prost = { workspace = true }
tonic = { workspace = true }
tokio-stream = { workspace = true }
[build-dependencies]
cargo_metadata = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
example-ebpf = { path = "../example-ebpf" }
xtask = { path = "../xtask" }

[[bin]]
name = "example"
path = "src/main.rs"

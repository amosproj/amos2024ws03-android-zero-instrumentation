// SPDX-FileCopyrightText: 2024 Felix Hilgers <felix.hilgers@fau.de>
// SPDX-FileCopyrightText: 2024 Franz Schlicht <franz.schlicht@gmail.com>
// SPDX-FileCopyrightText: 2025 Robin Seidl <robin.seidl@fau.de>
// SPDX-FileCopyrightText: 2024 Benedikt Zinn <benedikt.wh.zinn@gmail.com>
//
// SPDX-License-Identifier: MIT

syntax = "proto3";
package ziofa;

import "google/protobuf/empty.proto";
import "config.proto";
import "events.proto";

/**
  * These are the service endpoints on which ziofa serves.
  */
service Ziofa {
    // all Responses genereated by the ebpf-programms are send via this stream
    
    /**
    * Initialize the stream over which all following collected events will be
    * sent. If this gets called multiple times or by different clients, all
    * streams will receive the same data.
    */
    rpc InitStream(google.protobuf.Empty) returns (stream events.Event) {}

    /**
    * List all processes currently running.
    */
    rpc ListProcesses(google.protobuf.Empty) returns (ProcessList) {}
    
    /**
    * Get the currently set configuration.
    */
    rpc GetConfiguration(google.protobuf.Empty) returns (config.Configuration) {}

    /**
    * Set a new configuration. The old one will be replaced without merging.
    */
    rpc SetConfiguration(config.Configuration) returns (google.protobuf.Empty) {}

    /**
    * Index all symbols on the whole device into the database. This has to be
    * called once upon startup and every time a package of interest is
    * (re-)installed/updated.
    */
    rpc IndexSymbols(google.protobuf.Empty) returns (google.protobuf.Empty) {}
    
    /**
    * Search all symbols for the specified query. Requires an indexing run
    * beforehand.
    */
    rpc SearchSymbols(SearchSymbolsRequest) returns (SearchSymbolsResponse) {}

    /**
    * Get the offset of the specified symbol.
    */
    rpc GetSymbolOffset(GetSymbolOffsetRequest) returns (GetSymbolOffsetResponse) {}
}

message ProcessList {
    repeated Process processes = 1;
}

message Process {
    message CmdlineData {
        repeated string args = 1;
    }
    uint32 pid = 1;
    uint32 ppid = 2;
    oneof cmd {
        CmdlineData cmdline = 3;
        string comm = 4;
    }
    string state = 5;

}

message SearchSymbolsRequest {
    string query = 1;
    uint64 limit = 2;
}

message SearchSymbolsResponse {
    message Symbol {
        string method = 1;
        string path = 2;
        uint64 offset = 3;
    }
    repeated Symbol symbols = 1;
}

message GetSymbolOffsetRequest {
    string symbol_name = 1;
    string library_path = 2;
}

message GetSymbolOffsetResponse {
    optional uint64 offset = 1;
}